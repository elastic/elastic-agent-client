// Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
// or more contributor license agreements. Licensed under the Elastic License;
// you may not use this file except in compliance with the Elastic License.

syntax = "proto3";

package proto;

option cc_enable_arenas = true;
option go_package = "pkg/proto;proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "elastic-agent-client-deprecated.proto";

service ElasticAgent {
    // Called by the client to provide the Elastic Agent the state of the application over the V2 protocol.
    //
    // A `CheckinObserved` must be streamed at least every 30 seconds or it will result in the
    // set of units automatically marked as FAILED, and after 60 seconds the Elastic Agent will
    // force kill the entire process and restart it.
    rpc CheckinV2(stream CheckinObserved) returns (stream CheckinExpected);

    // Called by the client on connection to the GRPC allowing the Elastic Agent to stream action
    // requests to the application and the application stream back responses to those requests.
    //
    // Request and response is swapped here because the Elastic Agent sends the requests in a stream
    // to the connected process. The order of response from the process does not matter, it is acceptable
    // for the response order to be different then the request order.
    rpc Actions(stream ActionResponse) returns (stream ActionRequest);

    // DEPRECATED: DO NOT USE
    //
    // Called by the client to provide the Elastic Agent the state of the application.
    //
    // A `StateObserved` must be streamed at least every 30 seconds or it will result in the
    // application be automatically marked as FAILED, and after 60 seconds the Elastic Agent will
    // force kill the entire process and restart it.
    //
    // Messages definitions are preserved in elastic-agent-client-deprecated.proto.
    rpc Checkin(stream StateObserved) returns (stream StateExpected);
}

// State codes for the current state.
enum State {
    // STARTING is an optional observed state indicating the unit is doing work to start before
    // transitioning to HEALTHY.
    STARTING = 0;
    // CONFIGURING is an optional observed state indicating the unit is started and being configured
    // prior to transitioning to HEALTHY. Typically reported when a units current configuration does
    // not match its expected configuration.
    CONFIGURING = 1;
    // HEALTHY is a required observed and expected state. The agent sends an expected state of
    // HEALTHY when a unit should be started and running.
    HEALTHY = 2;
    // DEGRADED is an optional observed state indicating the unit experienced a non-fatal error.
    DEGRADED = 3;
    // FAILED is an optional observed state indicating the unit experienced a fatal error.
    FAILED = 4;
    // STOPPING is an optional observed state indicating the unit is doing the work required to STOP
    // before transitioning to STOPPED.
    STOPPING = 5;
    // STOPPED is a required observed and expected state. The agent sends an expected state of
    // STOPPED when a unit should stop running.
    STOPPED = 6;
}

// Type of unit.
enum UnitType {
    INPUT = 0;
    OUTPUT = 1;
}

// Log level for the unit.
enum UnitLogLevel {
    ERROR = 0;
    WARN = 1;
    INFO = 2;
    DEBUG = 3;
    TRACE = 4;
}

// Package metadata provided in the meta field of a unit.
message Package {
    // Source is the original source of the message. All values from the message are included here
    // even if other concrete fields are defined for this message.
    google.protobuf.Struct source = 1;
    // Name of the package.
    string name = 2;
    // Version of the package.
    string version = 3;
}

// Metadata provided in the meta field of a unit.
message Meta {
    // Source is the original source of the message. All values from the message are included here
    // even if other concrete fields are defined for this message.
    google.protobuf.Struct source = 1;
    // Package metadata.
    Package package = 2;
}

// Data stream defined in either top-level unit or in multiple streams in the unit.
message DataStream {
    // Source is the original source of the message. All values from the message are included here
    // even if other concrete fields are defined for this message.
    google.protobuf.Struct source = 1;
    // Dataset for the stream.
    string dataset = 2;
    // Type for the stream.
    string type = 3;
    // Namespace for the stream.
    string namespace = 4;
}

// Stream defined in a configuration.
message Stream {
    // Source is the original source of the message. All values from the message are included here
    // even if other concrete fields are defined for this message.
    google.protobuf.Struct source = 1;
    string id = 2;
    DataStream data_stream = 3;
}

// A units expected configuration.
message UnitExpectedConfig {
    // Source is the original source of the message. All values from the configuration are included here
    // even if other concrete fields are defined for this message.
    google.protobuf.Struct source = 1;
    // Unique ID for the Unit.
    string id = 2;
    // Type of the unit.
    string type = 3;
    // Name of the unit.
    string name = 4;
    // Revision of the unit.
    uint64 revision = 5;
    // Metadata information of the unit.
    Meta meta = 6;
    // Unit-level data stream.
    DataStream data_stream = 7;
    // Multiple streams per unit.
    repeated Stream streams = 8;
}

// A unit that is part of a collector/shipper.
message UnitExpected {
    // Unique ID of the unit.
    string id = 1;
    // Unit type.
    UnitType type = 2;
    // Expected state of the unit. Will always be one of HEALTHY or STOPPED.
    State state = 3;
    // Index of the either current configuration or new configuration provided.
    uint64 config_state_idx = 4;
    // Resulting configuration. (If the application already has the current `config_state_idx` this
    // will be empty.)
    UnitExpectedConfig config = 5;
    // Log level of the unit.
    UnitLogLevel log_level = 6;
}

// Only provided on first checkin expected response to the component.
//
// Includes the agent information that the component might want to use for its events.
message CheckinAgentInfo {
    // ID is the Elastic Agent's unique ID.
    string id = 1;
    // Version is the version of the running Elastic Agent.
    string version = 2;
    // Snapshot is true when the running Elastic Agent is a snapshot version.
    bool snapshot = 3;
}

// Feature flags configurations.
message Features {
    // Source is the original source of the features. All values from the features
    // are included here even if other concrete fields are defined for this message.
    google.protobuf.Struct source = 1;

    FQDNFeature fqdn = 2;
}

// FQDN feature flag indicates to use FQDN for host.name instead of hostname.
message FQDNFeature {
    bool enabled = 1;
}

// Elastic APM TLS config
message ElasticAPMTLS {
    bool skip_verify = 1;
    string server_cert = 2;
    string server_ca = 3;
}

// Elastic APM configuration
message ElasticAPM {
    ElasticAPMTLS tls = 1;
    string environment = 2;
    string api_key = 3;
    string secret_token = 4;
    repeated string hosts = 5;
    string global_labels = 6;
}

// APM configuration
message APMConfig {
    ElasticAPM elastic = 1;
}

// Component-level configuration.
message Component {
    ComponentLimits limits = 1;
    optional APMConfig apm_config = 2;
}

// Limits to configure for the currently running component.
message ComponentLimits {
  // Source is the original source of the limits. All values from the limits
  // are included here even if other concrete fields are defined for this message.
  google.protobuf.Struct source = 1;

  // GoMaxProcs limits the number of operating system threads that can execute user-level Go code simultaneously.
  // Translates into GOMAXPROCS Go runtime setting for the component implemented in Go.
  // Should be ignored by non-Go components.
  // If set to `0` the client should use all the available CPUs.
  uint64 go_max_procs = 2;
}

// A set of units and their expected states and configuration.
message CheckinExpected {
    // Units is the expected units the component should be running.
    repeated UnitExpected units = 1;
    // Agent info is provided only on first CheckinExpected response to the component.
    CheckinAgentInfo agent_info = 2;

    // Features are the expected feature flags configurations.
    // Added on Elastic Agent v8.7.1.
    Features features = 3;
    // Index of the most recently applied feature flags configuration
    uint64 features_idx = 4;

    // Component is the expected component configuration.
    // Added on Elastic Agent v8.10.0.
    Component component = 5;
    // Index of the most recently applied component configuration
    uint64 component_idx = 6;
}

// Observed status for a unit.
//
// Contains the currently applied `config_state_idx` (0 in the case of initial start, 1 is the first
// applied config index) along with the status of the application. In the case that the sent `config_state_idx`
// doesn't match the expected `config_state_idx` that Elastic Agent expects, the unit is always marked as
// `CONFIGURING` and a new `UnitExpected` will be sent to so it can have the latest configuration.
message UnitObserved {
    // Unique ID of the unit.
    string id = 1;
    // Unit type.
    UnitType type = 2;
    // Current index of the applied configuration.
    uint64 config_state_idx = 3;
    // Current state of the unit.
    State state = 4;
    // Human readable message for the state of the unit.
    // Exposed to users to provide more detail about the state for this single unit.
    string message = 5;
    // Payload for the current state.
    google.protobuf.Struct payload = 6;
}

// Observed version information for the running program.
message CheckinObservedVersionInfo {
    // Name of the binary.
    string name = 1;
    // Version of the binary.
    string version = 2;
    // Additional metadata about the binary.
    map<string, string> meta = 3;
}

// Observed statuses and configuration for defined units.
//
// In the case that a unit is missing from the observation then the Elastic Agent will mark that missing unit
// as `STARTING` and send a new `UnitExpected` for the missing unit.
message CheckinObserved {
    // Token that is used to uniquely identify the connection to the Elastic Agent.
    string token = 1;
    // Units observed state.
    repeated UnitObserved units = 2;
    // Version information about the running program. Should always be included on first checkin, and not again unless
    // one of the values have changed.
    optional CheckinObservedVersionInfo version_info = 3;

    // Features are the expected feature flags configurations.
    // Added on Elastic Agent v8.7.1.
    Features features = 4;
    // Index of the most recently applied feature flags configuration
    uint64 features_idx = 5;

    // Index of the most recently applied component configuration
    // Added on Elastic Agent v8.10.0.
    uint64 component_idx = 6;
}

// A action request is streamed from the Elastic Agent to the application so an action can be performed
// by the connected application.
message ActionRequest {
    // Type of action being performed.
    enum Type {
        // Custom action (registered by the unit)
        CUSTOM = 0;
        // Defined diagnostics action.
        DIAGNOSTICS = 1;
    }
    // The level that the action is operating on.
    // Currently only used for diagnostics. 
    enum Level {
       // All diagnostics
        ALL = 0;
        // Component level action
        COMPONENT = 1;
        // Unit level action
        UNIT = 2;
    }
    // Unique ID of the action.
    string id = 1;
    // Name of the action (name is ignored for DIAGNOSTICS).
    string name = 2;
    // JSON encoded parameters for the action.
    bytes params = 3;
    // Unique ID of the unit (only used with V2).
    string unit_id = 4;
    // Type of the unit (only used with V2).
    UnitType unit_type = 5;
    // Type of action to be performed (only used with V2).
    Type type = 6;
    // Level marks the action as either operating on a component, or a unit.
    // If level=component, then the consumer should ignore the unit_id and unit_type fields. 
    Level level = 7;
}

message ActionDiagnosticUnitResult {
    // Human readable name of the diagnostic result content.
    string name = 1;
    // Filename to use to store the diagnostic to the disk.
    string filename = 2;
    // Human readable description of the information this diagnostic provides.
    string description = 3;
    // Content-Type of the resulting content.
    string content_type = 4;
    // Actual file content.
    bytes content = 5;
    // Timestamp the content was generated at.
    google.protobuf.Timestamp generated = 6;
}

// An action response is streamed from the application back to the Elastic Agent to provide a result to
// an action request.
message ActionResponse {
    // Status result of the action.
    enum Status {
        // Action was successful.
        SUCCESS = 0;
        // Action has failed.
        FAILED = 1;
    }
    // Token that is used to uniquely identify the application to agent. When agent started this
    // application it would have provided it this token.
    string token = 1;
    // Unique ID of the action.
    string id = 2;
    // Status of the action.
    Status status = 3;
    // JSON encoded result for the action (empty when diagnostic action response).
    bytes result = 4;
    // Specific result for diagnostics action. (only used in V2)
    repeated ActionDiagnosticUnitResult diagnostic = 5;
}

// Services that the client is allowed to use over the connection.
enum ConnInfoServices {
    // V1 checkin service.
    Checkin = 0;
    // V2 checkin service.
    CheckinV2 = 1;
    // Key-value store service.
    Store = 2;
    // Artifact store service.
    Artifact = 3;
    // Log service.
    Log = 4;
}

// Connection information sent to the application on startup so it knows how to connected back to the Elastic Agent.
//
// This is normally sent through stdin and should never be sent across a network un-encrypted.
message ConnInfo {
    // GRPC connection address.
    string addr = 1;
    // Server name to use when connecting over TLS.
    string server_name = 2;
    // Token that the application should send as the unique identifier when connecting over the GRPC.
    string token = 3;
    // CA certificate.
    bytes ca_cert = 4;
    // Peer certificate.
    bytes peer_cert = 5;
    // Peer private key.
    bytes peer_key = 6;
    // Allowed services that spawned process can use. (only used in V2)
    repeated ConnInfoServices services = 7;
}
