#!/usr/bin/env groovy

@Library('apm@current') _

pipeline {
  agent { label 'ubuntu && immutable' }
  environment {
    BASE_DIR="src/github.com/elastic/elastic-agent-client"
    PIPELINE_LOG_LEVEL='INFO'
  }
  options {
    timeout(time: 1, unit: 'HOURS')
    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))
    timestamps()
    ansiColor('xterm')
    disableResume()
    durabilityHint('PERFORMANCE_OPTIMIZED')
    rateLimitBuilds(throttle: [count: 60, durationName: 'hour', userBoost: true])
    quietPeriod(10)
  }
  triggers {
    issueCommentTrigger('(?i).*(?:jenkins\\W+)?run\\W+(?:the\\W+)?tests(?:\\W+please)?.*')
  }
  stages {
    stage('Checkout') {
      options { skipDefaultCheckout() }
      steps {
        pipelineManager([ cancelPreviousRunningBuilds: [ when: 'PR' ] ])
        deleteDir()
        gitCheckout(basedir: "${BASE_DIR}")
        stash allowEmpty: true, name: 'source', useDefaultExcludes: false
      }
    }
    stage('Lint') {
      options { skipDefaultCheckout() }
      steps {
        deleteDir()
        unstash 'source'
        insideGo{
          dir("${BASE_DIR}"){
            sh(label: 'Checks formatting / linting',script: 'mage -debug check:all')
          }
        }
      }
    }
    stage('Update') {
      options { skipDefaultCheckout() }
      steps {
        deleteDir()
        unstash 'source'
        insideGo{
          dir("${BASE_DIR}"){
            sh(label: 'Checks formatting / linting',script: 'mage -debug update')
          }
        }
      }
    }
    stage('Test') {
      options { skipDefaultCheckout() }
      steps {
        deleteDir()
        unstash 'source'
        insideGo{
          dir("${BASE_DIR}"){
            sh(label: 'Unit test', script: 'go test -race ./... 2>&1 | tee test_results.txt')
            sh(label: 'Convert test results', script: 'go-junit-report < test_results.txt > junit.xml')
          }
        }
      }
      post {
        always {
          junit(allowEmptyResults: true,
            keepLongStdio: true,
            testResults: "${BASE_DIR}/junit*.xml")
        }
      }
    }
  }
  post {
    cleanup {
      notifyBuildResult(prComment: true)
    }
  }
}

def insideGo(Closure body){
  def goAgent
  retry(2) {
    sleep randomNumber(min: 2, max: 5)
    goAgent = docker.build("go-agent", "${BASE_DIR}/.ci/jenkins-go-agent")
  }
  goAgent.inside(){
    withEnv([
      "HOME=${env.WORKSPACE}/${env.BASE_DIR}",
      "GOPATH=${env.WORKSPACE}"
    ]) {
      body()
    }
  }
}
